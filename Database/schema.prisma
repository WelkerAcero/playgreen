// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// prisma-client-js

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Countries {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users Users[]
}

model Users {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(30)
  lastname   String   @db.VarChar(30)
  documentId String   @db.VarChar(10)
  phone      String   @db.VarChar(12)
  email      String   @unique
  username   String   @unique
  address    String   @db.VarChar(100)
  gender     String?  @db.Char(1) // Or M or F
  birthDate  DateTime
  city       String   @db.VarChar(30)

  Roles   Roles @relation(fields: [role_id], references: [id])
  role_id Int

  Countries  Countries @relation(fields: [country_id], references: [id])
  country_id Int

  UsersTransactions UsersTransactions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted   Boolean   @default(false)
  deletedAt DateTime?
}

model Roles {
  id               Int                @id @default(autoincrement())
  rol_name         String             @unique @db.VarChar(30)
  Users            Users[]
  RolesPermissions RolesPermissions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permissions {
  id               Int                @id @default(autoincrement())
  type             String             @unique @db.VarChar(40)
  RolesPermissions RolesPermissions[]
}

//m:m Campo creado para recibir Permissions y Roles => Muchos a muchos
model RolesPermissions {
  id Int @id @default(autoincrement())

  Roles   Roles @relation(fields: [role_id], references: [id]) // no se ve como campo, solo se registra la relación
  role_id Int

  Permissions   Permissions @relation(fields: [permission_id], references: [id]) // no se ve como campo, solo se registra la relación
  permission_id Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([role_id, permission_id])
}

model Categories {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(20)

  UsersTransactions UsersTransactions[]
}

model UsersTransactions {
  id Int @id @default(autoincrement())

  amount_money Decimal @db.Decimal(6, 4)

  Users   Users @relation(fields: [user_id], references: [id])
  user_id Int

  Categories  Categories @relation(fields: [category_id], references: [id])
  category_id Int

  Bets   Bets? @relation(fields: [bet_id], references: [id])
  bet_id Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sports {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  Events Events[]
}

model Events {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  event_place String   @db.VarChar(50)
  event_date  DateTime
  Sports      Sports   @relation(fields: [sport_id], references: [id])
  sport_id    Int

  Bets Bets[]
}

model Teams {
  id   Int    @id @default(autoincrement())
  name String @unique
  Bets Bets[]
}

model Bets {
  id         Int     @id @default(autoincrement())
  bet_option Int
  odd        Float
  status     String  @default("active") // active, cancelled, settled
  result     String? // won, lost

  event    Events @relation(fields: [event_id], references: [id])
  event_id Int

  Teams             Teams               @relation(fields: [team_id], references: [id])
  team_id           Int
  UsersTransactions UsersTransactions[]
}
